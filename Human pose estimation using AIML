code for the Human pose estimation using python

pip install mediapipe opencv-python
import cv2
import mediapipe as mp

# Initialize MediaPipe Pose model
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5)

# Initialize MediaPipe Drawing module to draw the pose on the image
mp_drawing = mp.solutions.drawing_utils

# Start webcam for real-time pose estimation
cap = cv2.VideoCapture(0)

# Optional: You can resize the frame for better performance
frame_width = 640
frame_height = 480
cap.set(cv2.CAP_PROP_FRAME_WIDTH, frame_width)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, frame_height)

# Real-time loop for webcam feed
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Flip the frame horizontally for a later selfie-view display
    frame = cv2.flip(frame, 1)

    # Convert the BGR frame to RGB (required by MediaPipe)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Process the frame and get pose landmarks
    results = pose.process(rgb_frame)

    # If pose landmarks are found, draw them on the frame
    if results.pose_landmarks:
        # Draw pose landmarks for single person
        mp_drawing.draw_landmarks(frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

        # Optional: Process landmarks for gesture recognition (e.g., raised hand)
        # Example: Check if wrist is higher than elbow (this is just an example for one gesture)
        landmarks = results.pose_landmarks.landmark
        if landmarks[mp_pose.PoseLandmark.LEFT_WRIST].y < landmarks[mp_pose.PoseLandmark.LEFT_ELBOW].y:
            cv2.putText(frame, "Left hand raised", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # Display the resulting frame with pose landmarks
    cv2.imshow('Human Pose Estimation', frame)

    # Exit the loop when the 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close all windows
cap.release()
cv2.destroyAllWindows()
if results.pose_landmarks:
    for landmarks in results.pose_landmarks:
        mp_drawing.draw_landmarks(frame, landmarks, mp_pose.POSE_CONNECTIONS)
